#!/usr/sbin/nft -f

# Start with a clean slate
flush ruleset

# The main table for both IPv4 and IPv6 traffic
table inet filter {

    # == INPUT CHAIN ==
    # Handles all traffic coming TO the server itself.
    # We drop everything by default and add accept rules below.
    chain input {
        type filter hook input priority 0;
        policy drop;

        # Rule 1: Allow established and related connections
        # This is crucial for return traffic (e.g., the web server's reply to a user).
        ct state { established, related } accept

        # Rule 2: Drop invalid packets early
        # These are malformed packets that don't belong to any known connection.
        ct state invalid drop

        # Rule 3: Allow all traffic from the loopback interface (localhost)
        # Essential for services communicating internally.
        iifname "lo" accept

        # Rule 4: Allow ICMP (Ping) for network diagnostics
        # This allows you to ping your server.
        ip protocol icmp accept
        ip6 nexthdr icmpv6 accept

        # Rule 5: Allow SSH (Port 22) for remote administration
        # IMPORTANT: If you use a non-standard SSH port, change '22' here.
        tcp dport 22 accept

        # Rule 6: Allow Web Server Traffic
        # Port 80 for HTTP and Port 443 for HTTPS.
        tcp dport { 80, 443 } accept

        # Optional: Log dropped packets to see what is being blocked.
        # Uncomment the line below to log to your system's kernel log (e.g., via dmesg).
        # log prefix "nft-dropped-input: "
    }

    # == FORWARD CHAIN ==
    # Handles traffic passing THROUGH the server (routing).
    # Since this is a web server and not a router, we drop everything.
    chain forward {
        type filter hook forward priority 0;
        policy drop;
    }

    # == OUTPUT CHAIN ==
    # Handles traffic generated FROM the server itself.
    # A permissive 'accept' policy is common for simplicity, allowing the server
    # to e.g., download updates or connect to APIs.
    chain output {
        type filter hook output priority 0;
        policy accept;
    }
}
